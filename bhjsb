
def get_points(file):
    my_txt = open(file, 'r')
    all_pts = my_txt.readlines()
    x = np.empty(len(all_pts))
    y = np.empty(len(all_pts))
    for i in range(len(all_pts)):
        line = all_pts[i]
        line_splited = line.split()
        x[i] = float(line_splited[0])
        y[i] = float(line_splited[1])
    my_txt.close()
    return np.column_stack((x, y))

def plot(points, ch):
    fig = plt.figure(figsize=(6, 6), dpi=100)
    ax = fig.add_subplot()
    x = points[:, 0]
    y = points[:, 1]
    x_ch = ch[:, 0]
    y_ch = ch[:, 1]
    ax.scatter(y, x, color='red')
    ax.plot(y_ch, x_ch, marker='o')
    fig.show()



def left_index(points):
    #znajdujemy punkt o najmniejszym Y / największym x
    y_left = min(points[:, 1])
    x_min = max(points[:, 0])
    min_idx = 0
    for i in range(len(points)):
        if y_left == points[i][1] and points[i][0] < x_min:
            min_idx = i
    return min_idx

def orientation(p, q, r):
    # sprawdzamy kierunek skrętu
    dot_prod = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if dot_prod == 0:
        return 0
    elif dot_prod > 0:
        return 1
    else:
        return 2

def convex_hull(pts):
    # cur należy do otoczki
    # i to sprawdzany punkt
    # next to kolejny punkty ze zbioru punktów
    # Jeśli między nimi orientacja jest w prawo to się nic nie dzieje,
    # jeśli jest w lewo to next = i, w ten sposób dochodzimy do kolejnego punktu otoczki
    # Idziemy po punktach zgodnie z ruchem wskazówek zegara.
    n = len(pts)
    left = left_index(pts)  # indeks punktu po lewej
    hull = []   # punkty
    cur = left  # indeks
    next = 0    # indeks
    while next != left:
        hull.append(cur)
        next = (cur + 1) % n

        for i in range(n):
            if i != cur and i != next:
                if orientation(pts[cur], pts[i], pts[next]) == 2:
                    next = i
        cur = next
    hull_points_x = []
    hull_points_y = []
    for idx in hull:
        hull_points_x.append(pts[idx][0])
        hull_points_y.append(pts[idx][1])
        pts[idx] = None
    hull_points = np.column_stack((hull_points_x, hull_points_y))
    hull_points = np.append(hull_points, np.array([hull_points[0]]), axis=0)

    return hull_points, pts